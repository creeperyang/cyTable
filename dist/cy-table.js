"use strict";!function(t,e){if("function"==typeof define&&define.amd)define(["angular"],e);else{if("object"!=typeof exports)return e(t);module.exports=e(t)}}(angular||null,function(t){var e=t.module("cyTable",[]);e.config(["$compileProvider",function(t){t.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|file|data):/)}]),e.factory("cyTableParams",["$q","$log","$filter",function(e,a,r){var n=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},i=function(t){return Object.keys?Object.keys(t).length:function(t){var e,a=0;for(e in t)a++;return a}(t)},l={adjust:function(e,a){return t.isArray(e)?{list:e.slice(0,a.count()),total:e.length}:t.isObject(e)?(e.list=e.list.slice(0,a.count()),e):(a.data=[],a.total(0),!1)},filter:function(t,e){var a=e.filter(),n=a?r("filter")(t.list,a):void 0;return n?{list:n,total:n.length===e.$state.count?e.originalTotal:n.length}:t},sort:function(t,e){var a=e.sorting(),n=a?r("orderBy")(t.list,e.orderBy()):void 0;return n?{list:n,total:t.total}:t}},o=function(r,o){var s=this,c=function(){u.debugMode&&a.debug&&a.debug.apply(this,arguments)};this.data=[],this.originalData=void 0,this.originalTotal=void 0,this.cacheType=void 0,this.changedStates={},this.state=function(e){if(t.isDefined(e)){for(var a in e){var r=e[a];s.trackChanges(a,r,p[a]),p[a]=n(e[a])?parseFloat(e[a]):e[a]}return c("cyTable: set state",p),this}return p},this.props=function(e){return t.isDefined(e)?(u=t.extend(u,e),c("cyTable: set props",u),this):u},this.page=function(e){return t.isDefined(e)?this.state({page:e}):p.page},this.filter=function(e){return t.isDefined(e)?this.state({filter:e}):p.filter},this.count=function(e){return t.isDefined(e)?this.state({count:e,page:1}):p.count},this.sortType=function(e){return t.isDefined(e)?this.state({sortType:e,page:1}):p.sortType},this.filterType=function(e){return t.isDefined(e)?this.state({filterType:e,page:1}):p.filterType},this.total=function(e){return t.isDefined(e)?this.props({total:e}):u.total},this.trackChanges=function(t,e,a){s.changedStates[t]={name:t,prev:a,cur:e}},this.shouldUseCache=function(t,e){var a=i(e);if(1===a){if(e.sorting)return"local"===s.$state.sortType?"sort-local":!1;if(e.filter)return"local"===t.filterType?"filter-local":!1}else if(2===a&&e.page&&e.count)return e.page.cur===e.page.prev&&e.count.cur<=e.count.prev?"count-local":!1;return!1},this.query=function(e){var a,r,n={};if(t.isArray(e))for(a in e)a in p&&(n[a]=p[a]);else if(t.isFunction(e))for(a in p)"filterType"!==a&&"sortType"!==a&&(r=e(a,p[a]),r===!0?n[a]=p[a]:t.isArray(r)&&(n[r[0]]=r[1]));else for(a in p)"filterType"!==a&&"sortType"!==a&&(n[a]=p[a]);return n},this.getData=function(e,a,r){e.resolve(t.isArray(this.data)&&t.isObject(a)?{list:r?this.data:this.data.slice((a.page()-1)*a.count(),a.page()*a.count())}:{list:[],total:0})},this.reload=function(){var t,a=e.defer();u.loading=u.$scope.$loading=!0,c("cyTable: about to reload."),(s.cacheType=s.shouldUseCache(p,s.changedStates))?(a.resolve({list:(s.originalData||s.data).slice(0,p.count),total:s.originalTotal||p.total}),t=a.promise):(u.getData(a,s),t=a.promise.then(function(t){var e=l.adjust(t,s);return e?(s.originalData=e.list,s.originalTotal=e.total):c("cyTable: data is empty or not valid.",t),e})),s.changedStates={},t.then(function(t){u.loading=u.$scope.$loading=!1,u.$scope.$csvGenerated=!1,t&&("local"===p.filterType&&p.filter&&(t=l.filter(t,s)),"local"===p.sortType&&p.sorting&&(t=l.sort(t,s)),c("cyTable: current scope",u.$scope),s.data=u.$scope.$data=t.list,n(t.total)&&s.total(t.total),u.$scope.pages=s.generatePagesArray(s.page(),s.total(),s.count()),u.$scope.$emit("cyTableAfterReloadData"))})},this.generatePagesArray=function(t,e,a){var r,n,i,l,o,s,c;if(r=11,s=[],o=Math.ceil(e/a),o>1){s.push({type:"prev",number:Math.max(1,t-1),active:t>1}),s.push({type:"first",number:1,active:t>1}),i=Math.round((r-5)/2),l=Math.max(2,t-i),n=Math.min(o-1,t+2*i-(t-l)),l=Math.max(2,l-(2*i-(n-l)));for(var p=l;n>=p;)c=p===l&&2!==p||p===n&&p!==o-1?{type:"more",active:t!==p,number:p}:{type:"page",number:p,active:t!==p},s.push(c),p++;s.push({type:"last",number:o,active:t!==o}),s.push({type:"next",number:Math.min(o,t+1),active:o>t})}return s},this.sorting=function(e){if(2===arguments.length){var a={};return a[e]=arguments[1],this.state({sorting:a}),this}return t.isDefined(e)?this.state({sorting:e}):p.sorting},this.orderBy=function(){var t=[];for(var e in p.sorting)t.push(("asc"===p.sorting[e]?"+":"-")+e);return t};var p=this.$state={page:1,count:5,filter:null,filterType:"local",sorting:null,sortType:"local"},u={loading:!1,total:0,$scope:null,defaultSort:"desc",filterDelay:750,counts:[5,10,25,50],sortingIndicator:"span",getData:this.getData};return this.props(o),this.state(r),this};return o}]);var a=["$scope","cyTableParams","$timeout",function(e,a,r){function n(t){e.params.sortType(t)}function i(t){e.params.filterType(t)}var l=function(){var t=0;return function(e,a){r.cancel(t),t=r(e,a)}}();e.$watch("params",function(a,r){t.isUndefined(a)||(e.$watch("filterType",function(t){t&&i(t)}),e.$watch("sortType",function(t){t&&n(t)}),e.$watch("params.$state",function(a,r){t.isUndefined(a)||(t.equals(a.filter,r&&r.filter)?e.params.reload():l(function(){e.params.$state.page=1,e.params.reload()},e.params.props().filterDelay))},!0))}),e.sortBy=function(t,a){var r=e.parse(t.sortable);if(r){var n=e.params.props().defaultSort,i="asc"===n?"desc":"asc",l=e.params.sorting()&&e.params.sorting()[r]&&e.params.sorting()[r]===n,o=a.ctrlKey||a.metaKey?e.params.sorting():{};o[r]=l?i:n,e.params.state({sorting:o})}}}];return e.directive("cyTable",["$compile","$q","$parse",function(e,r,n){return{restrict:"A",priority:1001,scope:!0,controller:a,compile:function(a){var r,i=[],l=0,o=a.find("table"),s=o.find("thead"),c=t.element(document.querySelector("tr:not(.cy-table-group)"));return c?(t.forEach(c.find("td"),function(e){var a=t.element(e);if(!a.attr("ignore-cell")||"true"!==a.attr("ignore-cell")){var r=function(t,e){return function(r){return n(a.attr("data-"+t)||a.attr(t))(r,{$columns:i})||e}},o=r("title"," "),s=r("header",!1),c=r("filter",!1)(),p=!1,u=!1;c&&c.$$name&&(u=c.$$name,delete c.$$name),c&&c.templateURL&&(p=c.templateURL,delete c.templateURL),a.attr("data-title-text",o()),i.push({id:l++,title:o,sortable:r("sortable",!1),"class":a.attr("data-header-class")||a.attr("header-class"),filter:c,filterTemplateURL:p,filterName:u,headerTemplateURL:s,filterData:a.attr("filter-data")?a.attr("filter-data"):null,show:a.attr("ng-show")?function(t){return n(a.attr("ng-show"))(t)}:function(){return!0}})}}),r=c.outerHTML?c.outerHTML:t.element("<div></div>").append(c.clone()).html(),function(a,l,o,c){var p=l.find("table").addClass("cy-table-content");if(a.$columns=i,a.$rowTpl="<table><tbody>"+r.replace(/^(\s*<\s*tr.+)(\$data)/,"$1$allData")+"</tbody></table>",o.$observe("filterType",function(t){a.filterType=t}),o.$observe("sortType",function(t){a.sortType=t}),a.$watch(o.tableParams,function(e){t.isUndefined(e)||(a.paramsModel=n(o.tableParams),a.params=e,e.props().$scope=a)},!0),a.parse=function(e){return t.isDefined(e)?e(a):""},o.showFilter&&a.$parent.$watch(o.showFilter,function(t){a.showFilter=t}),t.forEach(i,function(e){var r;if(e.filterData){if(r=n(e.filterData)(a,{$column:e}),!t.isObject(r)||!t.isObject(r.promise))throw new Error("Function "+e.filterData+" must be instance of $q.defer()");return delete e.filterData,r.promise.then(function(a){t.isArray(a)||(a=[]),a.unshift({title:"-",id:""}),e.data=a})}}),!l.hasClass("cy-table")){a.templates={header:o.templateHeader?o.templateHeader:"cy-table/header.html",pagination:o.templatePagination?o.templatePagination:"cy-table/pager.html",operation:o.templateOperation?o.templateOperation:"cy-table/operation.html"};var u=s.length>0?s:t.element(document.createElement("thead")).attr("ng-include","templates.header"),f=t.element(l[0].querySelector(".cy-table-pagination")),m=t.element(l[0].querySelector(".cy-table-operation"));f.attr({"cy-table-pagination":"params","template-url":"templates.pagination"}),m.attr({"cy-table-operation":"","template-url":"templates.operation"}),l.find("thead").remove(),l.addClass("cy-table"),p.prepend(u),e(u)(a),e(f)(a),e(m)(a)}}):void 0}}}]),e.directive("cyTablePagination",["$compile",function(e){return{restrict:"A",scope:{params:"=cyTablePagination",templateUrl:"="},replace:!1,link:function(a,r,n){a.$watch("params",function(e){t.isUndefined(e)||a.params.props().$scope.$on("cyTableAfterReloadData",function(){a.pages=a.params.generatePagesArray(a.params.page(),a.params.total(),a.params.count())},!0)}),a.$watch("templateUrl",function(n){if(!t.isUndefined(n)){var i=t.element(document.createElement("div"));i.attr({"ng-include":"templateUrl"}),r.append(i),e(i)(a)}})}}}]),e.directive("cyTableOperation",["$compile",function(e){return{restrict:"A",scope:!0,replace:!1,require:"^cyTable",link:function(a,r,n){n.templateUrl&&n.$observe("templateUrl",function(n){if(!t.isUndefined(n)){var i=t.element(document.createElement("div"));i.attr({"ng-include":n}),r.append(i),e(i)(a)}})}}}]),e.run(["$templateCache",function(t){t.put("cy-table/filters/text.html",'<input type="text" name="{{column.filterName}}" ng-model="params.filter()[name]" ng-change="params.trackChanges(\'filter\', params.filter())" ng-if="filter === \'text\' && params.filterType() === \'local\'" class="input-filter form-control" />'),t.put("cy-table/header.html",'<tr> <th ng-repeat="column in $columns" ng-class="{ \'sortable\': parse(column.sortable), \'sort-asc\': params.sorting()[parse(column.sortable)]==\'asc\', \'sort-desc\': params.sorting()[parse(column.sortable)]==\'desc\' }" ng-click="sortBy(column, $event)" ng-show="column.show(this)" ng-init="template=column.headerTemplateURL(this)" class="header {{column.class}}"> <div ng-if="!template" ng-show="!template" ng-bind="parse(column.title)"></div> <div ng-if="template" ng-show="template"><div ng-include="template"></div></div> </th> </tr> <tr ng-show="showFilter && params.filterType() === \'local\'" class="cy-table-filters"> <th ng-repeat="column in $columns" ng-show="column.show(this)" class="filter"> <div ng-repeat="(name, filter) in column.filter"> <div ng-if="column.filterTemplateURL" ng-show="column.filterTemplateURL"> <div ng-include="column.filterTemplateURL"></div> </div> <div ng-if="!column.filterTemplateURL" ng-show="!column.filterTemplateURL"> <div ng-include="\'cy-table/filters/\' + filter + \'.html\'"></div> </div> </div> </th> </tr>'),t.put("cy-table/pager.html",'<ul class="cy-table-pager pager ng-cloak"><li ng-repeat="page in pages" ng-class="{\'disabled\': !page.active, \'previous\': page.type === \'prev\', \'next\': page.type===\'next\'}"><a ng-if="page.type === \'prev\'" ng-click="params.page(page.number)" href="">Prev</a><a ng-if="page.type === \'next\'" ng-click="params.page(page.number)" href="">Next</a><a ng-if="page.type === \'page\' || page.type === \'first\' || page.type === \'last\'" ng-click="params.page(page.number)" href="">{{page.number}}</a><a ng-if="page.type === \'more\'" ng-click="params.page(page.number)" href="">...</a></li></ul>')}]),e});
//# sourceMappingURL=data:application/json;base64,